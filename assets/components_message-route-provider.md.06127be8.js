import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.ab452b29.js";
const __pageData = JSON.parse('{"title":"Message Route Provider","description":"","frontmatter":{},"headers":[{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"GetRouteUris","slug":"getrouteuris","link":"#getrouteuris","children":[]},{"level":3,"title":"Add","slug":"add","link":"#add","children":[]}]},{"level":2,"title":"Implementation","slug":"implementation","link":"#implementation","children":[{"level":3,"title":"DefaultMessageRouteProvider","slug":"defaultmessagerouteprovider","link":"#defaultmessagerouteprovider","children":[]},{"level":3,"title":"Specifications","slug":"specifications","link":"#specifications","children":[]}]}],"relativePath":"components/message-route-provider.md"}');
const _sfc_main = { name: "components/message-route-provider.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="message-route-provider" tabindex="-1">Message Route Provider <a class="header-anchor" href="#message-route-provider" aria-hidden="true">#</a></h1><p>An implementation of the <code>IMessageRouteProvider</code> interface is used to obtain a list of the uris that a message should be routed to.</p><p>The <code>DefaultMessageRouteProvider</code> makes use if the <code>ServiceBusOptions</code> to determine the routing. You could implement this interface for custom routing such as a centrally managed database containing the routing.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="getrouteuris" tabindex="-1">GetRouteUris <a class="header-anchor" href="#getrouteuris" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;string&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetRouteUris</span><span style="color:#89DDFF;">(object</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">message</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The method will return the list of uris that the message should be routed to. All qualifying routes should be added to the resulting collection of uris.</p><h3 id="add" tabindex="-1">Add <a class="header-anchor" href="#add" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Add</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IMessageRoute</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">messageRoute</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The method will add a new <code>IMessageRoute</code> instance.</p><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-hidden="true">#</a></h2><h3 id="defaultmessagerouteprovider" tabindex="-1">DefaultMessageRouteProvider <a class="header-anchor" href="#defaultmessagerouteprovider" aria-hidden="true">#</a></h3><p>The <code>MessageRouteProvider</code> obtains its configuration from the <a href="/shuttle-esb/options/message-routes.html">MessageRouteOptions</a> defined on the <code>ServiceBusOptions</code>.</p><h3 id="specifications" tabindex="-1">Specifications <a class="header-anchor" href="#specifications" aria-hidden="true">#</a></h3><p>For each message route you need to specify the specification to apply to the value. The <a href="http://en.wikipedia.org/wiki/Specification_pattern" target="_blank" rel="noreferrer">specification</a> will determine wether the route will be added.</p><h4 id="startswithmessageroutespecification" tabindex="-1">StartsWithMessageRouteSpecification <a class="header-anchor" href="#startswithmessageroutespecification" aria-hidden="true">#</a></h4><p>The <code>StartsWithMessageRouteSpecification</code> will include the route when the message type&#39;s full name starts with the given <code>value</code></p><h4 id="typelistmessageroutespecification" tabindex="-1">TypeListMessageRouteSpecification <a class="header-anchor" href="#typelistmessageroutespecification" aria-hidden="true">#</a></h4><p>For the <code>TypeListMessageRouteSpecification</code> you need to provide a list of the assembly-qualified name of the type or types (semi-colon delimited).</p><h4 id="regexmessageroutespecification" tabindex="-1">RegexMessageRouteSpecification <a class="header-anchor" href="#regexmessageroutespecification" aria-hidden="true">#</a></h4><p>For the <code>RegexMessageRouteSpecification</code> you need to provide the <a href="http://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex.aspx" target="_blank" rel="noreferrer">regex</a> expression to apply to the full name of the type.</p><h4 id="assemblymessageroutespecification" tabindex="-1">AssemblyMessageRouteSpecification <a class="header-anchor" href="#assemblymessageroutespecification" aria-hidden="true">#</a></h4><p>The <code>AssemblyMessageRouteSpecification</code> is derived from the <code>TypeListMessageRouteSpecification</code> and includes all the types from the assembly represented by <code>value</code>. If the assembly provided by <code>value</code> ends with either <code>.exe</code> or <code>.dll</code> the assembly will be loaded from the given path, else the assembly will be loaded from the <code>AppDomain</code> (so it should be referenced).</p>', 23);
const _hoisted_24 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_24);
}
const messageRouteProvider = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  messageRouteProvider as default
};
