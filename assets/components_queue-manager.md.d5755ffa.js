import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.2d1f51b6.js";
const __pageData = '{"title":"Queue Manager","description":"","frontmatter":{},"headers":[{"level":2,"title":"Methods","slug":"methods"},{"level":3,"title":"GetQueueFactory","slug":"getqueuefactory"},{"level":3,"title":"GetQueue","slug":"getqueue"},{"level":3,"title":"CreateQueue","slug":"createqueue"},{"level":3,"title":"CreatePhysicalQueues","slug":"createphysicalqueues"},{"level":3,"title":"GetQueueFactories","slug":"getqueuefactories"},{"level":3,"title":"RegisterQueueFactory","slug":"registerqueuefactory"},{"level":3,"title":"ContainsQueueFactory","slug":"containsqueuefactory"},{"level":3,"title":"UriResolver","slug":"uriresolver"}],"relativePath":"components/queue-manager.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="queue-manager" tabindex="-1">Queue Manager <a class="header-anchor" href="#queue-manager" aria-hidden="true">#</a></h1><p>An implementation of the <code>IQueueManager</code> interface is used to manage the queues used in Shuttle.Esb.</p><p>The queue manager cannot be swapped out for your own implementation as it is integral to the functioning of Shuttle.Esb and the default implementation should suffice.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="getqueuefactory" tabindex="-1">GetQueueFactory <a class="header-anchor" href="#getqueuefactory" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IQueueFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetQueueFactory</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">scheme</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#FFCB6B;">IQueueFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetQueueFactory</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Uri</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The method will return an instance of the queue factory registered for the requested <code>scheme</code> in the uri.</p><h3 id="getqueue" tabindex="-1">GetQueue <a class="header-anchor" href="#getqueue" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IQueue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetQueue</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>This method returns an <code>IQueue</code> implementation that interacts with the queuing mechanism represented by the <code>scheme</code> in the uri. This method will attempt to return a cached <code>IQueue</code> instance. If none is found a new instance is requested using the <code>CreateQueue</code> method.</p><p>Should the uri scheme be <code>resolver</code> this method will invoke the configured <code>UriResolver</code> to obtain the represented queue uri and wrap that as a <code>ResolvedQueue</code>.</p><h3 id="createqueue" tabindex="-1">CreateQueue <a class="header-anchor" href="#createqueue" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IQueue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateQueue</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#FFCB6B;">IQueue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateQueue</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Uri</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">uri</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>The method returns a new instance of the requested queue implementation represented by the uri scheme.</p><h3 id="createphysicalqueues" tabindex="-1">CreatePhysicalQueues <a class="header-anchor" href="#createphysicalqueues" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreatePhysicalQueues</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IServiceBusConfiguration</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">serviceBusConfiguration</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>This method will attempt to create the physical queues configured for the inbox, outbox, control inbox, and deferred queues if they are present. The relevant queue implementation is safe cast to an <code>ICreateQueue</code> instance and, if implemented, the queue creation will be attempted.</p><p>Please note that the creation may fail for a variety of reasons such as permissions or the relevant server cannot be reached. For a production environment it is recommended that the required queues are manually created and assigned the relevant permissions.</p><h3 id="getqueuefactories" tabindex="-1">GetQueueFactories <a class="header-anchor" href="#getqueuefactories" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#FFCB6B;">IEnumerable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IQueueFactory</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GetQueueFactories</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span></code></pre></div><p>Returns the <code>IQueueFactory</code> implementations that the queue manager is aware of.</p><h3 id="registerqueuefactory" tabindex="-1">RegisterQueueFactory <a class="header-anchor" href="#registerqueuefactory" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RegisterQueueFactory</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">IQueueFactory</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">queueFactory</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Use this method to explicitly register a queue factory instance.</p><h3 id="containsqueuefactory" tabindex="-1">ContainsQueueFactory <a class="header-anchor" href="#containsqueuefactory" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ContainsQueueFactory</span><span style="color:#89DDFF;">(string</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">scheme</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>This method determines whether the queue manager has a queue factory registered for the given scheme.</p><h3 id="uriresolver" tabindex="-1">UriResolver <a class="header-anchor" href="#uriresolver" aria-hidden="true">#</a></h3><div class="language-c#"><pre><code><span class="line"><span style="color:#A6ACCD;">IUriResolver UriResolver </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> get</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> set</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>Use this property to get or set the relevant <code>UriResolver</code>.</p>', 30);
const _hoisted_31 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_31);
}
var queueManager = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, queueManager as default };
