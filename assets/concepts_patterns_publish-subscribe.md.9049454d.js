import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.c706ac22.js";
var _imports_0 = "/shuttle-esb/images/publish-subscribe.png";
const __pageData = '{"title":"Publish / Subscribe","description":"","frontmatter":{},"headers":[{"level":2,"title":"Publishing from a web-site","slug":"publishing-from-a-web-site"}],"relativePath":"concepts/patterns/publish-subscribe.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="publish-subscribe" tabindex="-1">Publish / Subscribe <a class="header-anchor" href="#publish-subscribe" aria-hidden="true">#</a></h1><p>When you <code>Send</code> a <em>command</em> shuttle needs to be able to determine the relevant endpoint. The same applies to publishing an event. Shuttle would need to know where to <code>Publish</code> the event to. When sending a command there should be 1, and exactly 1, endpoint that receives the command. When publishing, however, there can be 0 to any number of subscribers.</p><p><img src="' + _imports_0 + '" alt=""></p><p>In order to register an endpoint as a subscriber you can either manually configure the subscription store, as recommended for production, or register the subscription using the <code>ISubscriptionManager</code> implementation:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">subscriptionManager</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> resolver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ISubscriptionManager</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// using type</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event1</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event2</span><span style="color:#89DDFF;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// using a list of types</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event1</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// using a full type name</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event1</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">FullName</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event2</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">FullName</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// using a list of full type names</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">new</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event1</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">FullName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">typeof</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">Event2</span><span style="color:#89DDFF;">).</span><span style="color:#A6ACCD;">FullName </span><span style="color:#89DDFF;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// using a generic</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event1</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"><span style="color:#A6ACCD;">subscriptionManager</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Subscribe</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Event2</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F78C6C;">var</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bus</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> IComponentResolver</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Resolve</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IServiceBus</span><span style="color:#89DDFF;">&gt;().</span><span style="color:#82AAFF;">Start</span><span style="color:#89DDFF;">();</span></span>\n<span class="line"></span></code></pre></div><p>In a production environment it is recommended that the subscription store be maintained manually using an elevated identity. For the above one could use an identity that has <strong>read-only</strong> permissions. The <code>Subscribe</code> method will fail if the subscription does not exist. In this way one can ensure that the subscription is not missing from the relevant store.</p><h1 id="shuttle-configuration" tabindex="-1">Shuttle Configuration <a class="header-anchor" href="#shuttle-configuration" aria-hidden="true">#</a></h1><p>All endpoints that belong to the same physical pub/sub store should connect to the same store.</p><p>You would have a store for your development environment, perhaps even locally on your own machine. You would have a separate store for your QA, UAT, and production environments.</p><h2 id="publishing-from-a-web-site" tabindex="-1">Publishing from a web-site <a class="header-anchor" href="#publishing-from-a-web-site" aria-hidden="true">#</a></h2><p>Typically you would publish events from some processing endpoint, as opposed to a web-site.</p><p>That being said, there is nothing stopping you from publishing a message from a web-site. The idea behind publishing a message is that the message represents an event that is typically produced by some <em>processing</em> endpoint. Since a web application should not really be processing anything but rather be <em>sending</em> commands off to a processing endpoint it would stand to reason that a web application should not be publishing events.</p><p>So if you find yourself in a situation where it seems to make sense to publish from your web application it indicates that you need to make a design decision: either the design is not optimal (so the web application is performing processing) <em>or</em> you are constrained in some way the prohibits the implementation of a processing endpoint (maybe a shared hosting environment).</p>', 13);
const _hoisted_14 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_14);
}
var publishSubscribe = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, publishSubscribe as default };
