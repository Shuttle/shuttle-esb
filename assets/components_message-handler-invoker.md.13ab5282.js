import { _ as _export_sfc, o as openBlock, c as createElementBlock, a as createStaticVNode } from "./app.c73b04f3.js";
const __pageData = JSON.parse('{"title":"Message Handler Invoker","description":"","frontmatter":{},"headers":[{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"Invoke","slug":"invoke","link":"#invoke","children":[]}]}],"relativePath":"components/message-handler-invoker.md"}');
const _sfc_main = { name: "components/message-handler-invoker.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="message-handler-invoker" tabindex="-1">Message Handler Invoker <a class="header-anchor" href="#message-handler-invoker" aria-hidden="true">#</a></h1><p>An implementation of the <code>IMessageHandlerInvoker</code> interface is used to invoke a mesage handler for the given message in the <code>PipelineEvent</code>.</p><p>If you do not specify your own implementation of the <code>IMessageHandlerInvoker</code> the default <code>MessageHandlerInvoker</code> will be used. This invoker makes use of the <code>IServiceProvider</code> to create the required message handler.</p><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-hidden="true">#</a></h2><h3 id="invoke" tabindex="-1">Invoke <a class="header-anchor" href="#invoke" aria-hidden="true">#</a></h3><div class="language-c#"><button class="copy"></button><span class="lang">c#</span><pre><code><span class="line"><span style="color:#FFCB6B;">MessageHandlerInvokeResult</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Invoke</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">PipelineEvent</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">pipelineEvent</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"></span></code></pre></div><p>Invoke the message handler using the data contained in the given <code>PipelineEvent</code>.</p><h1 id="messagehandlerinvoker" tabindex="-1">MessageHandlerInvoker <a class="header-anchor" href="#messagehandlerinvoker" aria-hidden="true">#</a></h1><p>Type <code>MessageHandlerInvoker</code> implements the <code>IMessageHandlerInvoker</code> interface and will attempt to find an implementation of the required <code>IMessageHandler&lt;&gt;</code> interface.</p><p>If no handler can be found the <code>MessageHandlerInvokeResult</code> return from the <code>Invoke</code> method will have an <code>Invoked</code> value of <code>false</code>.</p><p>A handler is created per thread and re-used. Should you not want a handler to be re-used, or if you have some condition that determines re-use, you may implement the <code>IReusability</code> interface on the message handler and return the relevant <code>bool</code> value from the <code>IsReusable</code> property.</p>', 11);
const _hoisted_12 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_12);
}
const messageHandlerInvoker = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  messageHandlerInvoker as default
};
