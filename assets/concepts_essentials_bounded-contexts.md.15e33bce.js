import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.2d1f51b6.js";
const __pageData = '{"title":"Stadium example","description":"","frontmatter":{},"headers":[{"level":2,"title":"Financial Management","slug":"financial-management"},{"level":2,"title":"Maintenance Management","slug":"maintenance-management"},{"level":2,"title":"Event Management","slug":"event-management"},{"level":2,"title":"Putting it all together","slug":"putting-it-all-together"},{"level":2,"title":"Canonical Models","slug":"canonical-models"}],"relativePath":"concepts/essentials/bounded-contexts.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="stadium-example" tabindex="-1">Stadium example <a class="header-anchor" href="#stadium-example" aria-hidden="true">#</a></h1><p>Domain-driven design has the concept of a bounded context (BC). Have a look at <a href="http://martinfowler.com/bliki/BoundedContext.html" target="_blank" rel="noopener noreferrer">how Martin Fowler defines this</a>. In that definition he also refers to what he calls <a href="http://martinfowler.com/bliki/MultipleCanonicalModels.html" target="_blank" rel="noopener noreferrer">multiple canonical models</a>.</p><p>To make the concept of a bounded context more clear we could take seats in a stadium as an example. A stadium contains seats but a seat represents different things to different people.</p><h2 id="financial-management" tabindex="-1">Financial Management <a class="header-anchor" href="#financial-management" aria-hidden="true">#</a></h2><p>In most scenarios one would have to keep an asset register and it is typically owned by the financial folks since they are the <em>system of record</em> for any assets.</p><p>The finance department would be interested in <strong>data</strong> such as:</p><ul><li>asset number</li><li>asset type</li><li>date of purchase</li><li>cost</li><li>method of depreciation</li><li>date commissioned</li><li>date decommissioned</li></ul><p>They would also be interested in the following <strong>behaviour</strong>:</p><ul><li>Commission()</li><li>Depreciate()</li><li>Decommission()</li></ul><h2 id="maintenance-management" tabindex="-1">Maintenance Management <a class="header-anchor" href="#maintenance-management" aria-hidden="true">#</a></h2><p>The maintenance department would be interested in <strong>data</strong> such as:</p><ul><li>maintenance required</li><li>maintenance schedules</li></ul><p>The <strong>behaviour</strong> for them would be along the lines of:</p><ul><li>ScheduleMaintenance()</li><li>RegisterMaintenanceSchedule()</li></ul><h2 id="event-management" tabindex="-1">Event Management <a class="header-anchor" href="#event-management" aria-hidden="true">#</a></h2><p>The event booking folks would be have <strong>data</strong> like this:</p><ul><li>event name</li><li>event date</li><li>relevant seat number(s)</li></ul><p>And the relevant <strong>behaviour</strong> would include:</p><ul><li>RegisterEvent()</li><li>SellTicket()</li></ul><h2 id="putting-it-all-together" tabindex="-1">Putting it all together <a class="header-anchor" href="#putting-it-all-together" aria-hidden="true">#</a></h2><p>So, as we can see, even though a physical seat is one thing it can mean very different things to different people. This is where a <em>Bounded Context</em> comes in. You may even find that a similar concept is called something else in each context. You may find that an <code>Employee</code> in the <em>HR</em> BC is called a <code>User</code> in the <em>Identity &amp; Access Control</em> BC, or an <code>Author</code> in the <em>Collaboration</em> BC.</p><p>As behaviour is invoked on various objects within each BC the other BCs may need to be informed. To accomplish this one would need some communication mechanism based on an <em>Event Driven Architecture</em>. That is, of course, where a service bus like Shuttle.Esb would come in handy.</p><p>The <em>Financial Management</em> BC could publish an <code>AssetRegisteredEvent</code> and the other BCs would subscribe to that event and then determine if they need to register the asset number as an item they are interested in.</p><p>When the <em>Maintenance Management</em> BC removes a seat for maintenance it would publish a <code>ItemRemovedForMaintenanceEvent</code> that the <em>Booking Management</em> BC would subscribe to in order to exclude the seat as a bookable item for any events until the item is made available again.</p><h2 id="canonical-models" tabindex="-1">Canonical Models <a class="header-anchor" href="#canonical-models" aria-hidden="true">#</a></h2><p>All this is quite different and contrasting to what many enterprise-level architects refer to as a canonical data model. Stefan Tilkov has <a href="https://www.innoq.com/en/blog/thoughts-on-a-canonical-data-model/" target="_blank" rel="noopener noreferrer">something to say</a> about these too.</p><p>For our scenario a canonical model would need to include all the data from the various BCs. This is quite cumbersome and really does not add any real value.</p>', 27);
const _hoisted_28 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_28);
}
var boundedContexts = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, boundedContexts as default };
