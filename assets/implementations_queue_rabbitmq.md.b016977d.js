import { _ as _export_sfc, c as createElementBlock, o as openBlock, a as createStaticVNode } from "./app.2d1f51b6.js";
const __pageData = '{"title":"RabbitMQ","description":"","frontmatter":{},"headers":[{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Configuration","slug":"configuration"}],"relativePath":"implementations/queue/rabbitmq.md"}';
const _sfc_main = {};
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="rabbitmq" tabindex="-1">RabbitMQ <a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a></h1><div class="language-"><pre><code>PM&gt; Install-Package Shuttle.Esb.RabbitMQ\n</code></pre></div><p>This RabbitMQ implementation follows the <code>at-least-once</code> delivery mechanism supported by Shuttle.Esb and since RabbitMQ is a broker all communication takes place immediately with the broker.</p><p>If necessary you may want to use an <em>outbox</em> for a <code>store-and-forward</code> solution. By using a transactional outbox such as the sql implementation you could roll back sending of messages on failure.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><p>If you need to install RabbitMQ you can <a target="_blank" href="https://www.rabbitmq.com/install-windows.html">follow these instructions</a>.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h2><p>Since an instance of the <code>IRabbitMQConfiguration</code> interface is required remember to register one. Typically the default implementation will do:</p><div class="language-c#"><pre><code><span class="line"><span style="color:#A6ACCD;">IComponentRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Register</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">IRabbitMQConfiguration</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RabbitMQConfiguration</span><span style="color:#89DDFF;">&gt;();</span></span>\n<span class="line"></span></code></pre></div><p>The queue configuration is part of the specified uri, e.g.:</p><div class="language-xml"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">inbox</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">workQueueUri</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rabbitmq://username:password@host:port/virtualhost/queue?prefetchCount=25</span><span style="color:#89DDFF;">&amp;</span><span style="color:#C3E88D;">amp</span><span style="color:#89DDFF;">;</span><span style="color:#C3E88D;">durable=true</span><span style="color:#89DDFF;">&amp;</span><span style="color:#C3E88D;">amp</span><span style="color:#89DDFF;">;</span><span style="color:#C3E88D;">persistent=true</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">    .</span></span>\n<span class="line"><span style="color:#89DDFF;">    .</span></span>\n<span class="line"><span style="color:#89DDFF;">    .</span></span>\n<span class="line"><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"></span></code></pre></div><table><thead><tr><th>Segment / Argument</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>username:password</td><td>empty</td><td></td></tr><tr><td>virtualhost</td><td>/</td><td></td></tr><tr><td>port</td><td>default</td><td></td></tr><tr><td>prefetchcount</td><td>25</td><td>Specifies the number of messages to prefetch from the queue.</td></tr><tr><td>durable</td><td>true</td><td>Determines whether the queue is durable. Note: be very mindful of the possible consequences before setting to &#39;false&#39;.</td></tr><tr><td>persistent</td><td>true</td><td>Determines whether messages will be persisted. Note: be very mindful of the possible consequences before setting to &#39;false&#39;.</td></tr><tr><td>priority</td><td>empty</td><td>Determines the number of priorities supported by the queue.</td></tr></tbody></table><p>In addition to this there is also a RabbitMQ specific section (defaults specified here):</p><div class="language-xml"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">section</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rabbitmq</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Shuttle.Esb.RabbitMQ.RabbitMQSection, Shuttle.Esb.RabbitMQ</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">configSections</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">rabbitmq</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">localQueueTimeoutMilliseconds</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">250</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">remoteQueueTimeoutMilliseconds</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2000</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">connectionCloseTimeoutMilliseconds</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1000</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">requestedHeartbeat</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">30</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">operationRetryCount</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">useBackgroundThreadsForIO</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">  /&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  .</span></span>\n<span class="line"><span style="color:#A6ACCD;">  .</span></span>\n<span class="line"><span style="color:#A6ACCD;">  .</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">configuration</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div>', 14);
const _hoisted_15 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_15);
}
var rabbitmq = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { __pageData, rabbitmq as default };
